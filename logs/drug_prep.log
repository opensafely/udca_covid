
. 
. cap mkdir ./output/tables/

. 
. tempfile tempfile 

. import delimited using ./output/input_pbc.csv
(23 vars, 1,000 obs)

. save `tempfile' 
file /tmp/St00016.000001 saved

. 
. ** First import udca population
. import delimited using ./output/input_additional.csv, clear
(335 vars, 1,000 obs)

. 
. * Format dates 
. forvalues i=1/334 {
  2. gen udcaA`i' = date(udca_`i', "YMD")
  3. format udcaA`i' %dD/N/CY
  4. drop udca_`i'
  5. }
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)
(500 missing values generated)

. 
. * Reshape to long format 
. reshape long udcaA, i(patient_id) j(presc_number)
(note: j = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
>  27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 5
> 2 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 
> 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
>  103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 
> 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 1
> 41 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 16
> 0 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
>  180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 
> 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 2
> 18 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 23
> 7 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256
>  257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 
> 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 2
> 95 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 31
> 4 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333
>  334)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                     1000   ->  334000
Number of variables                 335   ->       3
j variable (334 values)                   ->   presc_number
xij variables:
             udcaA1 udcaA2 ... udcaA334   ->   udcaA
-----------------------------------------------------------------------------

. 
. * Drop rows where there is no prescription
. drop if udcaA==.
(167,000 observations deleted)

. 
. * Check that prescriptions are in order
. gen order_flag = (udcaA<udcaA[_n-1] & patient_id==patient_id[_n-1])

. tab order_flag 

 order_flag |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |     83,984       50.29       50.29
          1 |     83,016       49.71      100.00
------------+-----------------------------------
      Total |    167,000      100.00

. * Create flag if any out of order prescriptions in the data - should only be 
> in dummy data 
. egen out_of_order = max(order_flag)

. tab out_of_order

out_of_orde |
          r |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    167,000      100.00      100.00
------------+-----------------------------------
      Total |    167,000      100.00

. 
. * Sort if out of order - should only apply to dummy data 
. sort patient_id udcaA 

. 
. drop order_flag

. * Check in order
. gen order_flag = (udcaA<udcaA[_n-1] & patient_id==patient_id[_n-1])

. tab order_flag

 order_flag |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    167,000      100.00      100.00
------------+-----------------------------------
      Total |    167,000      100.00

. 
. * Identify prescriptions with the same date 
. bys patient_id: gen dup_presc = (udcaA==udcaA[_n-1])

. tab dup_presc 

  dup_presc |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    155,368       93.03       93.03
          1 |     11,632        6.97      100.00
------------+-----------------------------------
      Total |    167,000      100.00

. * Drop them 
. drop if dup_presc 
(11,632 observations deleted)

. 
. drop order_flag out_of_order dup_presc presc_number

. 
. * Re-count number of prescriptions 
. gen udca=1

. bys patient_id: egen total_no_presc = total(udca)

. 
. * Assume end date is 60 days after prescription generated
. gen stop_date = udcaA + 60 

. format stop_date %dD/N/CY 

. 
. * Drop rows where prescriptions ends prior to March 2020
. count if stop_date <= date("01March2020", "DMY")
  0

. drop if stop_date <= date("01March2020", "DMY")
(0 observations deleted)

. 
. * Collapse adjacent prescriptions that are continuous prescribing into one pe
> riod 
. * Flag if start date is greater than assumed stop date of previous prescripti
> on 
. bys patient_id (udcaA): gen spell = udcaA > stop_date[_n-1]

. bys patient_id (udcaA): replace spell = 1 if _n==1
(1000 real changes made)

. * Flag each row associated with each spell 
. bys patient_id (udcaA): gen spell_sum = sum(spell) 

. * Start date of spell 
. bys patient_id spell_sum (udcaA): gen start = udcaA[1] 

. bys patient_id spell_sum (udcaA): gen stop = stop_date[_N] 

. format start stop %dD/N/CY

. keep patient_id start stop udca total_no_presc

. duplicates drop 

Duplicates in terms of all variables

(154,338 observations deleted)

. 
. * Add in rows where there are gaps in prescriptions 
. bys patient_id (start): gen to_expand = 1 + (stop < start[_n+1])*(start[_n+1]
> ~=.)

. tab to_expand 

  to_expand |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |      1,000       97.09       97.09
          2 |         30        2.91      100.00
------------+-----------------------------------
      Total |      1,030      100.00

. expand to_expand 
(30 observations created)

. 
. * Flag new rows
. bys patient_id start: gen new_record = (_n==2)

. tab to_expand new_record 

           |      new_record
 to_expand |         0          1 |     Total
-----------+----------------------+----------
         1 |     1,000          0 |     1,000 
         2 |        30         30 |        60 
-----------+----------------------+----------
     Total |     1,030         30 |     1,060 

. 
. * Updating new rows 
. replace udca=0 if new_record==1
(30 real changes made)

. replace start = stop if new_record==1
(30 real changes made)

. replace stop = start[_n+1] if new_record==1
(30 real changes made)

. drop new_record to_expand

. 
. * Update to match follow-up time
. * merge variables from original study definition 
. merge m:1 patient_id using `tempfile', keepusing(dereg_date died_date_ons) 

    Result                           # of obs.
    -----------------------------------------
    not matched                         1,862
        from master                       958  (_merge==1)
        from using                        904  (_merge==2)

    matched                               102  (_merge==3)
    -----------------------------------------

. tab _merge

                 _merge |      Freq.     Percent        Cum.
------------------------+-----------------------------------
        master only (1) |        958       48.78       48.78
         using only (2) |        904       46.03       94.81
            matched (3) |        102        5.19      100.00
------------------------+-----------------------------------
                  Total |      1,964      100.00

. 
. * Update variables for people without prescriptions 
. replace start = date("01/03/2020", "DMY") if _merge==2
(904 real changes made)

. replace udca = 0 if _merge==2
(904 real changes made)

. replace stop = date("31/12/2022", "DMY") if _merge==2
(904 real changes made)

. replace total_no_presc = 0 if _merge==2
(904 real changes made)

. 
. * Determine end of follow-up date
. gen dereg_dateA = date(dereg_date, "YMD")
(1,458 missing values generated)

. format %dD/N/CY dereg_dateA

. drop dereg_date

. gen died_dateA = date(died_date_ons, "YMD")
(1,460 missing values generated)

. format %dD/N/CY died_dateA

. drop died_date_ons

. gen end_study = date("31/12/2022", "DMY")

. egen end_date = rowmin(dereg_dateA end_study died_dateA)

. * Count number of days of follow-up 
. gen total_fu = end_date - date("01/03/2020", "DMY")

. 
. ** Update start and end of follow-up for cohort
. * Identify prescriptions that start prior to March 2020
. gen start_prior = (start < date("01/03/2020", "DMY"))

. replace start = date("01/03/2020", "DMY") if start_prior==1
(0 real changes made)

. 
. * Identify rows that end after study end date for person 
. gen end_after = (stop > end_date )

. gen end_before = (start > end_date) 

. 
. tab end_after

  end_after |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        321       16.34       16.34
          1 |      1,643       83.66      100.00
------------+-----------------------------------
      Total |      1,964      100.00

. tab end_before 

 end_before |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |      1,958       99.69       99.69
          1 |          6        0.31      100.00
------------+-----------------------------------
      Total |      1,964      100.00

. 
. * Drop whole rows that are after end_date 
. drop if end_before 
(6 observations deleted)

. 
. * Check those flagged as ending after are last row only 
. bys patient_id: gen last = _n==_N

. tab last end_after 

           |       end_after
      last |         0          1 |     Total
-----------+----------------------+----------
         0 |        40         14 |        54 
         1 |       281      1,623 |     1,904 
-----------+----------------------+----------
     Total |       321      1,637 |     1,958 

. 
. replace stop = end_date if end_after==1 & end_before==0
(1,637 real changes made)

. 
. count if start > stop 
  0

. 
. * Drop unnecessary variables
. drop _merge - end_date start_prior - last

. 
. save ./output/time_varying_udca
file ./output/time_varying_udca.dta saved

. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
end of do-file

. . file open output using "/tmp/drug_prep.do.OD3n.out", write text replace

. . file write output "success" 

. . file close output

. 
end of do-file


